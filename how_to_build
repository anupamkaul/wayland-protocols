https://mesonbuild.com/Commands.html
https://mesonbuild.com/Subprojects.html
https://mesonbuild.com/CMake-module.html
https://mesonbuild.com/Builtin-options.html#specifying-options-per-subproject

https://people.freedesktop.org/~dbn/pkg-config-guide.html
https://superuser.com/questions/47967/where-does-pkg-config-takes-its-information-from


https://stdworkflow.com/398/install-the-latest-version-of-cmake-under-ubuntu-16-04
https://gitlab.freedesktop.org/wayland/wayland-protocols/-/issues

meson build/ --prefix=$WLD
ninja -C build/ install

--build.cmake-prefix-path

short term fix:
until I figure out how to point to the correct wayland-scanner,
I disabled the option of using tests (by setting the value to false in mesa_options) 

This means that wayland-scanner will currently be picked from /usr/bin..
(instead of /home/anupam/Wayland/install/bin/wayland-scanner)

But happily, I still have to solve this problem (of paths really pointing to my install dir)
as weston also needs the correct version of libwayland_server.so :)

Of course the real value is in really studying the code:
1. Understand what the protocols offer (so I can find out what is available, wht is missing)
2. Try to add/modify the protocols and watch the result myself
3. Check it all into my local code
4. If I am brave enough, then approach the community with patches...

--- Issue -----

debug June 16 2022
------------------

somehow cmake of meson build is looking up wayland scanner in 
/usr/lib/x64../pkg_config
(this is an older version)

it should look up in /home/anupam/Wayland/install/usr..
(this was generated by compiling wayland previously, and should be the wayland scanner
for wayland-protocols and the weston project)

try: meson build/ --prefix=$WLD --cmake-prefix-path=$WLD/usr

from meson_logs

Calling CMake (['/usr/bin/cmake']) in /home/anupam/git.graphics/weston/wayland-protocols/build/meson-private/cmake_wayland-scanner with:
  - "--trace"
  - "--trace-expand"
  - "--no-warn-unused-cli"
  - "-DCMAKE_TOOLCHAIN_FILE=/home/anupam/git.graphics/weston/wayland-protocols/build/meson-private/cmake_wayland-scanner/CMakeMesonToolchainFile.cmake"
  - "."
  - "-DCMAKE_PREFIX_PATH=/home/anupam/Wayland/install/usr"
  -- Module search paths:    ['/', '/home/anupam/Wayland/install', '/usr', '/usr/local']
  -- CMake root:             /usr/share/cmake-3.5
  -- CMake architectures:    ['x86_64-linux-gnu']
  -- CMake lib search paths: ['lib', 'lib32', 'lib64', 'libx32', 'share', 'lib/x86_64-linux-gnu']

the Module search paths take my path only if I explicitly set $CMAKE_PREFIX_PATH (set by my .bashrc for ROS)
i.e. 
CMAKE_PREFIX_PATH=$WLD

(Module Search Path substitutes the shell's $CMAKE_PREFIX_PATH directly it seems)
But this is only for modules

I need to do the same in CMake lilb search paths, because instead of the '/lib/x86..' I need it to look into my lib before it gets to that lib..

debug June 17 2022
-----------------

found the root reason:

basically pkgconfig (native or cross) is not found and we fall back to usr/bin/pkgconfig
then a couple of commands are tried (4 times) to match the dependency, only 1 out of them results in an older version, others return null

the relevant portion from logs is:

>>>
Pkg-config binary for 1 is not cached.
Pkg-config binary missing from cross or native file, or env var undefined.
Trying a default Pkg-config fallback at pkg-config
Found pkg-config: /usr/bin/pkg-config (0.29.1)
Determining dependency 'wayland-scanner' with pkg-config executable '/usr/bin/pkg-config'
env[PKG_CONFIG_PATH]: /home/anupam/Wayland/install/lib/pkgconfig/:/home/anupam/Wayland/install/share/pkgconfig
Called `/usr/bin/pkg-config --modversion wayland-scanner` -> 0
1.12.0
env[PKG_CONFIG_PATH]: /home/anupam/Wayland/install/lib/pkgconfig/:/home/anupam/Wayland/install/share/pkgconfig
Called `/usr/bin/pkg-config --cflags wayland-scanner` -> 0

env[PKG_CONFIG_PATH]: /home/anupam/Wayland/install/lib/pkgconfig/:/home/anupam/Wayland/install/share/pkgconfig
env[PKG_CONFIG_ALLOW_SYSTEM_LIBS]: 1
Called `/usr/bin/pkg-config --libs wayland-scanner` -> 0

env[PKG_CONFIG_PATH]: /home/anupam/Wayland/install/lib/pkgconfig/:/home/anupam/Wayland/install/share/pkgconfig
Called `/usr/bin/pkg-config --libs wayland-scanner` -> 0
>>>

now, even if $PKG_CONFIG_PATH is set to point to my local pkgconfig (shell), if I run:
/usr/bin/pkg-config --modversion wayland-scanner
I still get 1.12.0

-- and this command, run on the same $WLD, $PKG_CONFIG_PATH (modified shell) shows why:
pkg-config --variable pc_path pkg-config
/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig

showing that pkg-config still looks at the above paths, and it doesn't take into account what I set in $PKG_CONFIG_PATH specifically
Q.E.D.

now:
echo $PKG_CONFIG_PATH 
/home/anupam/Wayland/install/lib/pkgconfig/:/home/anupam/Wayland/install/share/pkgconfig/

it also turns out that the above path in $PKG_CONFIG_PATH, is wrong:
because it is actually: /Wayland/install/lib/x86_64-linux-gnu/pkgconfig/    (the x86_64-linux-gnu part was missing)

I fixed the actual path for $PKG_CONFIG_PATH in Install.sh, recompiled with meson and IT WORKED !!
The logs show that the correct Wayland Scanner is now found :)

----

Now:
echo $PKG_CONFIG_PATH 
/home/anupam/Wayland/install/lib/x86_64-linux-gnu/pkgconfig/:/home/anupam/Wayland/install/share/x86_64-linux-gnu/pkgconfig/

&&

/usr/bin/pkg-config --modversion wayland-scanner
1.20.92

this also proves that the 'pkg-config --variable pc_path pkg-config' command only refers to 
the default search path and not what is provided by $PKG_CONFIG_PATH (while it actually does refer to $PKG_CONFIG_PATH)

so the root cause was that $PKG_CONFIG_PATH was incorrectly set and was missing x86_64-linux-gnu in the local path.

Q.E.D.
----









